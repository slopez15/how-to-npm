0. 
	install npm
	npm install npm -g #for latest
1. 
	npm init #creates package.json
2. 
	npm adduser
	npm login
	npm whoami #good to know who your'e signed as
3.
	npm init --scope=<whatever> #I see the point only if categorizing, don't know 
if there is a diff purpose
	git init #Start git repo. Was a bonus, just a reminder too
4. 
	npm install [@scope/module@version]
5.
	npm ls #see all node_modules and dependencies
6.
	npm script #edit package.json "scripts":{"script1": "bash script here"}
7.  
	nano README.md
	npm init #place git url here, i think you don't use .git for repo
8.
	npm publish --access public #add the --access cause default is private and you 
must paid npm to post this way for private repos. The other repo scope is protected.
9.
	npm version
	npm view <pkg> version 
	#npm version (0.0.0) [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]
	#1.2.3
	#       ^ ^ ^
	#       | | `-- Patch version. Update for every change.
	#       | `---- Minor version. Update for API additions.
	#       `------ Major version. Update for breaking API changes.
10.
	npm publish
11. & 12.
	#npm dist-tag
	npm dist-tag add @<scope>/<pkg>@<version> [<tag>]
	npm dist-tag rm @scope/<pkg>@version <tag>
	npm dist-tag ls [@scope/<pkg>@version]
		ex: npm dist-tag add @scope/pkg@1.0.1 verify
	npm help dist-tag # for more info
13.
	#not sure, but I think this outdated method is based/dependent on package.json version range
	npm outdated #detects compatible releases
14.
	npm update #updates all deps to max package.json allows
15.
	#aka npm uninstall
	npm rm <pkg> -S #use to remove and remove from package.json

